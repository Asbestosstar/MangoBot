buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }

    dependencies {
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
    }
}

def getVersionCode = {
    def proc = 'git rev-list --count master'.execute()
    proc.waitFor()
    return proc.text.trim()
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'maven-publish'

group 'org.mangorage'
version "${BOT_VERSION}-c" + getVersionCode()

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://m2.dv8tion.net/releases'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url = 'https://repo.mattmalec.com/repository/releases'
    }
}

sourceSets {
    main {
        java {
            srcDir 'java'
        }
        resources {
            srcDir 'resources'
        }
    }
}

println("Current Bot Version: ${version}")

dependencies {
    // Libs for Bot
    implementation("net.dv8tion:JDA:$JDA_VERSION") // JDA
    implementation("dev.arbjerg:lavaplayer:$LAVA_VERSION") // LavaPlayer to stream audio from YT/FILES to Discord
    implementation("com.google.code.gson:gson:$GSON_VERSION")
    implementation("org.apache.logging.log4j:log4j-core:$LOG4J_VERSION")
    implementation("org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5") // GITHUB API
    implementation('com.mattmalec:Pterodactyl4J:2.BETA_140')
    implementation('org.slf4j:slf4j-simple:2.0.9')

    // Core Libs
    implementation project(path: ':mangobotapi')
    implementation project(path: ':mboteventbus')
    implementation project(path: ':mangoutils')

    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:$LOG4J_VERSION")


    // Shadow
    shadow project(path: ':mangobotapi')
    shadow project(path: ':mboteventbus')
    shadow project(path: ':mangoutils')


    shadow("net.dv8tion:JDA:$JDA_VERSION")
    shadow("dev.arbjerg:lavaplayer:$LAVA_VERSION")
    shadow("com.google.code.gson:gson:$GSON_VERSION")
    shadow("org.apache.logging.log4j:log4j-core:$LOG4J_VERSION")
    shadow("org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5")
    shadow('org.slf4j:slf4j-simple:2.0.9')

}

tasks.register('runBot', JavaExec) {
    group "bot tasks"
    description "Runs the bot"
    args "-dev"

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.mangorage.mangobot.Main'
}

tasks.register('runTestBot', JavaExec) {
    group "bot tasks"
    description "Runs the test bot"
    args "-dev"

    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'org.mangorage.mangobottest.Main'
}

shadowJar {
    group "bot tasks"
    description "Builds the bot jar"

    exclude "natives/darwin/**"
    exclude "natives/linux-aarch32/**"
    exclude "natives/linux-arm/**"
    exclude "natives/linux-armhf/**"
    exclude "natives/linux-musl-aarch64/**"
    exclude "natives/linux-musl-x86-64/**"
    exclude "natives/linux-x86/**"
    //exclude "natives/linux-x86-64/**"
    exclude "natives/win-x86/**"
    exclude "natives/win-x86-64/**"
    exclude "natives/linux-aarch64/**"
    exclude "natives/win32-x86/**"
    exclude "natives/win32-x86-64/**"
    exclude "org/mozilla/**"
}

test {
    useJUnitPlatform()
}


jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': 'org.mangorage.mangobot.Main'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
            pom {
                name = 'MangoBot'
                description = 'A discord bot used for many servers'
                url = 'https://github.com/RealMangorage/MangoBot/'
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/RealMangorage/MangoBot/issues'
                }
                developers {
                    developer {
                        id = 'mangorage'
                        name = 'MangoRage'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/releases/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            group "io.github.realmangorage"
            credentials {
                username = findProperty("mango.maven.username")
                password = findProperty("mango.maven.password")
            }
        }
    }
}

task publishAndRestartServer(type: JavaExec) {
    dependsOn publish
    group = "bot tasks"
    description = "Publish and restart Bot server"
    classpath = sourceSets.main.runtimeClasspath
    main = "org.mangorage.mangobot.ServerRestart"
}