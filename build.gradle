buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }

    dependencies {
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
    }
}

def getVersionCode = {
    def proc = 'git rev-list --count master'.execute()
    proc.waitFor()
    return proc.text.trim()
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'maven-publish'

group 'org.mangorage'
version "${BOT_VERSION}-c" + getVersionCode()

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    api.extendsFrom internalimplementation
}


repositories {
    mavenCentral()
    maven {
        url 'https://m2.dv8tion.net/releases'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url = 'https://repo.mattmalec.com/repository/releases'
    }
}

sourceSets {
    main {
        java {
            srcDir 'java'
        }
        resources {
            srcDir 'resources'
        }
    }
}

def libs = [
        JDA             : 'net.dv8tion:JDA:5.0.0-beta.15',
        LAVA_PLAYER     : 'dev.arbjerg:lavaplayer:2.0.2',
        GSON            : 'com.google.code.gson:gson:2.10.1',
        LOG4J_CORE      : 'org.apache.logging.log4j:log4j-core:2.20.0',
        LOG4J_SLF4J_IMPL: 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0',
        GITHUB_API      : 'org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5',
        PTERODACTYL4J   : 'com.mattmalec:Pterodactyl4J:2.BETA_140',
        SLF4J_SIMPLE    : 'org.slf4j:slf4j-simple:2.0.9',
        REFLECTIONS     : 'org.reflections:reflections:0.10.2'
]

ext.globalLibs = libs


println("Current Bot Version: ${version}")

dependencies {
    runtimeOnly(libs.LOG4J_SLF4J_IMPL)

    // Libs for Bot

    implementation(libs.JDA)
    implementation(libs.LAVA_PLAYER)
    implementation(libs.GSON)
    implementation(libs.LOG4J_CORE)
    implementation(libs.GITHUB_API)
    implementation(libs.PTERODACTYL4J)
    implementation(libs.SLF4J_SIMPLE)
    implementation(libs.REFLECTIONS)

    // Core Libs
    implementation project(path: ':mangobotapi')
    implementation project(path: ':mboteventbus')
    implementation project(path: ':mangoutils')

    // runtimeOnly project(path: ':exampleaddon')

    testImplementation project(path: ':mangoutils')

    internalimplementation project(path: ':mangobotapi')
    internalimplementation project(path: ':mboteventbus')
    internalimplementation project(path: ':mangoutils')
}

tasks.register('runBot', JavaExec) {
    group "bot tasks"
    description "Runs the bot"
    args "-dev"

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.mangorage.mangobot.Main'
}

tasks.register('runTestBot', JavaExec) {
    group "bot tasks"
    description "Runs the test bot"
    args "-dev"

    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'org.mangorage.mangobottest.Main'
}

jar {
    dependsOn configurations.internalimplementation

    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.internalimplementation.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
    }

    manifest {
        attributes 'Main-Class': 'org.mangorage.mangobot.Main'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            pom {
                name = 'MangoBot'
                description = 'A discord bot used for many servers'
                url = 'https://github.com/RealMangorage/MangoBot/'
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/RealMangorage/MangoBot/issues'
                }
                developers {
                    developer {
                        id = 'mangorage'
                        name = 'MangoRage'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/releases/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            group "io.github.realmangorage"
            credentials {
                username = findProperty("mango.maven.username")
                password = findProperty("mango.maven.password")
            }
        }
    }
}

task publishAndRestartServer(type: JavaExec) {
    dependsOn publish
    group = "bot tasks"
    description = "Publish and restart Bot server"
    classpath = sourceSets.main.runtimeClasspath
    main = "org.mangorage.mangobot.ServerRestart"
}