import java.util.regex.Matcher

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }

    dependencies {
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
        classpath 'net.researchgate:gradle-release:3.0.2'
    }
}


def getVersionCode = {
    def proc = 'git rev-list --count master'.execute()
    proc.waitFor()
    return proc.text.trim()
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'net.researchgate.release'

group 'org.mangorage'
version "${BOT_VERSION}-c" + getVersionCode()

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://m2.dv8tion.net/releases'
    }
    maven {
        url 'https://jitpack.io'
    }
}

sourceSets {
    main {
        java {
            srcDir 'java'
        }
        resources {
            srcDir 'resources'
        }
    }
}

print(getVersionCode() + " version")

dependencies {
    // Libs for Bot
    implementation("net.dv8tion:JDA:$JDA_VERSION") // JDA
    implementation("dev.arbjerg:lavaplayer:$LAVA_VERSION") // LavaPlayer to stream audio from YT/FILES to Discord
    implementation("com.google.code.gson:gson:$GSON_VERSION")
    implementation("org.apache.logging.log4j:log4j-core:$LOG4J_VERSION")
    implementation("org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5") // GITHUB API

    // Core Libs
    implementation project(path: ':mangobotapi')
    implementation project(path: ':mboteventbus')

    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:$LOG4J_VERSION")


    // Shadow
    shadow project(path: ':mangobotapi')
    shadow project(path: ':mboteventbus')


    shadow("net.dv8tion:JDA:$JDA_VERSION")
    shadow("dev.arbjerg:lavaplayer:$LAVA_VERSION")
    shadow("com.google.code.gson:gson:$GSON_VERSION")
    shadow("org.apache.logging.log4j:log4j-core:$LOG4J_VERSION")
    shadow("org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5")

}


tasks.register('runBot', JavaExec) {
    group "bot tasks"
    description "Runs the bot"
    args "-dev"

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.mangorage.mangobot.Main'
}

tasks.register('runTestBot', JavaExec) {
    group "bot tasks"
    description "Runs the test bot"
    args "-dev"

    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'org.mangorage.mangobottest.Main'
}

shadowJar {
    group "bot tasks"
    description "Builds the bot jar"
}

test {
    useJUnitPlatform()
}


jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': 'org.mangorage.mangobot.Main'
    }
}

release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = ''
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    snapshotSuffix = '-SNAPSHOT'
    buildTasks = []
    ignoredSnapshotDependencies = []
    versionPatterns = [
            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
    ]
    pushReleaseVersionBranch = null
    scmAdapters = [
            net.researchgate.release.GitAdapter,
            net.researchgate.release.SvnAdapter,
            net.researchgate.release.HgAdapter,
            net.researchgate.release.BzrAdapter
    ]

    git {
        requireBranch.set('main')
        pushToRemote.set('origin')
        pushToBranchPrefix.set('')
        commitVersionFileOnly.set(false)
        signTag.set(false)
    }

    svn {
        username.set(null)
        password.set(null)
        pinExternals.set(false)   // allows to pin the externals when tagging, requires subversion client >= 1.9.0
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
            pom {
                name = 'MangoBot'
                description = 'A discord bot used for many servers'
                url = 'https://github.com/RealMangorage/MangoBot/'
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/RealMangorage/MangoBot/issues'
                }
                developers {
                    developer {
                        id = 'mangorage'
                        name = 'MangoRage'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/releases/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            group "io.github.realmangorage"
            credentials {
                username = findProperty("mango.maven.username")
                password = findProperty("mango.maven.password")
            }
        }
    }
}